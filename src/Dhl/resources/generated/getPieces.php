<?php
return array (
  'getPieces' => 
  array (
    'httpMethod' => 'GET',
    'uri' => '/pieces',
    'responseModel' => 'getResponse',
    'parameters' => 
    array (
      'barcode' => 
      array (
        'description' => 'Barcode of a piece',
        'type' => 'array',
        'location' => 'query',
        'items' => 
        array (
          'type' => 'string',
        ),
      ),
      'bulk' => 
      array (
        'description' => 'Requests the result to be streamed, instead of using pagination. This feature is intended for large exports and should be used with care.',
        'type' => 'boolean',
        'location' => 'query',
      ),
      'events.leg.accountId' => 
      array (
        'description' => 'Account id of the customer',
        'type' => 'array',
        'location' => 'query',
        'items' => 
        array (
          'type' => 'string',
        ),
      ),
      'events.leg.airWaybillNumber' => 
      array (
        'description' => 'Air Waybill Number',
        'type' => 'string',
        'location' => 'query',
      ),
      'events.leg.debtorNumber' => 
      array (
        'description' => 'Debtor Number',
        'type' => 'string',
        'location' => 'query',
      ),
      'events.leg.destinationServiceArea' => 
      array (
        'description' => 'The destination service area',
        'type' => 'string',
        'location' => 'query',
      ),
      'events.leg.number' => 
      array (
        'description' => 'Leg number, as known in FLOW',
        'type' => 'string',
        'location' => 'query',
      ),
      'events.leg.originServiceArea' => 
      array (
        'description' => 'The originating service area',
        'type' => 'string',
        'location' => 'query',
      ),
      'endDate' => 
      array (
        'description' => 'Pieces will be returned until this date. This date is expected to be in ISO-8601 format.',
        'type' => 'string',
        'location' => 'query',
        'format' => 'full-date',
      ),
      'endLastUpdatedDate' => 
      array (
        'description' => 'Pieces will be returned until this last updated date. This date is expected to be in ISO-8601 format.',
        'type' => 'string',
        'location' => 'query',
        'format' => 'full-date',
      ),
      'filter' => 
      array (
        'description' => 'Special filter for specific cases, currently supports \'problem\' for problem pieces.',
        'type' => 'string',
        'location' => 'query',
      ),
      'id' => 
      array (
        'description' => 'Piece id, generated by PDS',
        'type' => 'array',
        'location' => 'query',
        'items' => 
        array (
          'type' => 'string',
        ),
      ),
      'limit' => 
      array (
        'description' => 'Number of results that should be returned, defaults to 10, maximum 100',
        'type' => 'integer',
        'location' => 'query',
      ),
      'product.code' => 
      array (
        'description' => 'The unique product code defined by PDS',
        'type' => 'string',
        'location' => 'query',
      ),
      'receiver.address.countryCode' => 
      array (
        'description' => 'Code of the country where the receiver is located',
        'type' => 'string',
        'location' => 'query',
      ),
      'receiver.address.houseNumber' => 
      array (
        'description' => 'House number of receiver',
        'type' => 'string',
        'location' => 'query',
      ),
      'receiver.address.postalCode' => 
      array (
        'description' => 'Postal code of receiver',
        'type' => 'string',
        'location' => 'query',
      ),
      'reference' => 
      array (
        'description' => 'Customer reference (i.e. orderId)',
        'type' => 'string',
        'location' => 'query',
      ),
      'searchId' => 
      array (
        'description' => 'Searches in both \'events.leg.number\' and \'events.leg.airWayBillNumber\', using a OR expression',
        'type' => 'string',
        'location' => 'query',
      ),
      'shipper.accountId' => 
      array (
        'description' => 'The shipper account number from Genesis',
        'type' => 'string',
        'location' => 'query',
      ),
      'shipper.address.countryCode' => 
      array (
        'description' => 'Code of the country where the shipper is located',
        'type' => 'string',
        'location' => 'query',
      ),
      'shipper.address.houseNumber' => 
      array (
        'description' => 'House number of shipper',
        'type' => 'string',
        'location' => 'query',
      ),
      'shipper.address.postalCode' => 
      array (
        'description' => 'Postal code of shipper',
        'type' => 'string',
        'location' => 'query',
      ),
      'skip' => 
      array (
        'description' => 'Number of results that should be skipped, defaults to 0',
        'type' => 'integer',
        'location' => 'query',
      ),
      'startDate' => 
      array (
        'description' => 'Shipments will be returned starting from this date. This date is expected to be in ISO-8601 format.',
        'type' => 'string',
        'location' => 'query',
        'format' => 'full-date',
      ),
      'startLastUpdatedDate' => 
      array (
        'description' => 'Shipments will be returned starting from this last updated date. This date is expected to be in ISO-8601 format.',
        'type' => 'string',
        'location' => 'query',
        'format' => 'full-date',
      ),
      'sortBy' => 
      array (
        'description' => 'Field that results should be sorted by. Valid inputs are any fields which can be searched on.',
        'type' => 'string',
        'location' => 'query',
      ),
      'sortOrder' => 
      array (
        'description' => 'Used in combination with sortBy. Valid inputs are \'ASC\' for ascending sort and \'DESC\' for descending. Defaults to \'DESC\'',
        'type' => 'string',
        'location' => 'query',
      ),
      'fields' => 
      array (
        'description' => 'Limit the fields returned in the response',
        'type' => 'array',
        'location' => 'query',
        'items' => 
        array (
          'type' => 'string',
        ),
      ),
    ),
    'summary' => 'Find pieces including legs and events',
  ),
);